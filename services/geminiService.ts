import { GoogleGenAI, Type } from '@google/genai';
import { Category, Prompt, Tone } from '../types';

if (!process.env.API_KEY) {
  console.warn("API_KEY environment variable not set. Prompt generation will fail.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

const handleGeminiError = (error: unknown, context: string): Error => {
    console.error(`Error calling Gemini API for ${context}:`, error);
    const errorMessage = String(error).toLowerCase();

    if (errorMessage.includes('api key')) {
        return new Error('API Key is invalid or missing. Please ensure it is configured correctly.');
    }
    if (errorMessage.includes('quota') || errorMessage.includes('rate limit')) {
        return new Error('You have exceeded your request limit (quota). Please wait and try again later.');
    }
    if (errorMessage.includes('invalid request') || errorMessage.includes('400')) {
        return new Error('The request was invalid. This could be due to the input provided.');
    }
    if (errorMessage.includes('fetch') || errorMessage.includes('network')) {
        return new Error('A network error occurred. Please check your internet connection.');
    }
    
    return new Error(`An unexpected error occurred while ${context}. Please try again.`);
};


export const generateOptimizedPrompt = async (
  userInput: string,
  tone: Tone,
  category: Category
): Promise<{ title: string; prompt: string; tags: string[] }> => {
  
  const systemInstruction = `You are Prompter, an expert in AI prompt engineering. A user wants a prompt for an AI model.
The user's goal is: "${userInput}".
The prompt should have a "${tone}" tone and be in the category: "${category}".

Based on this, generate a complete, structured, and optimized prompt. The prompt should be creative, detailed, and follow best practices for writing high-quality prompts.

Return your response as a single JSON object.`;

  const responseSchema = {
    type: Type.OBJECT,
    properties: {
      title: {
        type: Type.STRING,
        description: 'A short, catchy title for the generated prompt.'
      },
      prompt: {
        type: Type.STRING,
        description: 'The full, optimized prompt text, ready to be copied and used.'
      },
      tags: {
        type: Type.ARRAY,
        items: {
          type: Type.STRING,
          description: 'A relevant tag for the prompt'
        },
        description: 'An array of 3-5 relevant tags for the prompt.'
      }
    },
    required: ["title", "prompt", "tags"]
  };
  
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: userInput,
      config: {
        systemInstruction,
        responseMimeType: "application/json",
        responseSchema: responseSchema,
      },
    });

    const jsonText = response.text.trim();
    const parsedJson = JSON.parse(jsonText);
    return parsedJson;

  } catch (error) {
    throw handleGeminiError(error, 'generating your prompt');
  }
};

export const generateExampleOutput = async (prompt: Prompt): Promise<string> => {
    const systemInstruction = `You are an AI model tasked with generating an example output for a given prompt.
The user has provided a prompt designed for the "${prompt.model}" model.
The prompt is: "${prompt.prompt}"

Your task is to generate a concise and relevant example of what this prompt might produce. Keep the output clean and directly related to the prompt's instructions.`;
    
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt.prompt,
            config: {
                systemInstruction,
            },
        });

        return response.text;
    } catch (error) {
        throw handleGeminiError(error, 'generating an example output');
    }
};

export const generateExampleImage = async (promptText: string): Promise<string> => {
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: promptText,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error('No image was generated by the API.');
    }
  } catch (error) {
    throw handleGeminiError(error, 'generating an example image');
  }
};

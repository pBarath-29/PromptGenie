// A centralized service for all Firebase Realtime Database interactions via its REST API.

const DATABASE_URL = 'https://prompter-5b0d0-default-rtdb.firebaseio.com/';

/**
 * A generic fetch wrapper for the Firebase REST API.
 * @param path The path to the data (e.g., 'prompts', 'users/u1').
 * @param options Standard fetch options (method, body, etc.).
 * @returns A promise that resolves with the JSON response.
 */
const apiFetch = async <T>(path: string, options: RequestInit = {}): Promise<T | null> => {
    try {
        const response = await fetch(`${DATABASE_URL}${path}.json`, options);
        if (!response.ok) {
            throw new Error(`Firebase request failed: ${response.statusText}`);
        }
        // Handle responses that might be empty (e.g., after a DELETE or if data is null)
        if (response.status === 204 || response.headers.get('content-length') === '0') {
            return null;
        }
        return await response.json();
    } catch (error) {
        console.error(`Firebase API Error on path "${path}":`, error);
        throw error; // Re-throw to be handled by the caller
    }
};

/**
 * Fetches data from a specified path in the database.
 * @param path The path to the data.
 */
export const getData = async <T>(path: string): Promise<T | null> => {
    return apiFetch<T>(path, { method: 'GET' });
};

/**
 * Replaces the data at a specified path. Use with caution as it overwrites everything at that path.
 * @param path The path to the data.
 * @param data The data to write.
 */
export const setData = async <T>(path: string, data: T): Promise<T> => {
    return (await apiFetch<T>(path, {
        method: 'PUT',
        body: JSON.stringify(data),
    }))!;
};

/**
 * Updates specific fields at a specified path without overwriting other data.
 * @param path The path to the data.
 * @param data The partial data to update.
 */
export const updateData = async <T>(path: string, data: Partial<T>): Promise<T> => {
    return (await apiFetch<T>(path, {
        method: 'PATCH',
        body: JSON.stringify(data),
    }))!;
};

interface FirebasePostResponse {
    name: string; // This is the unique key generated by Firebase
}

/**
 * Adds a new item to a list. Firebase generates a unique key.
 * @param path The path to the list (e.g., 'users').
 * @param data The data for the new item.
 * @returns The response from Firebase, containing the generated key.
 */
export const pushData = async <T>(path: string, data: T): Promise<FirebasePostResponse> => {
    return (await apiFetch<FirebasePostResponse>(path, {
        method: 'POST',
        body: JSON.stringify(data),
    }))!;
}

/**
 * Deletes data at a specified path.
 * @param path The path to the data to delete.
 */
export const deleteData = async (path: string): Promise<void> => {
    await apiFetch(path, { method: 'DELETE' });
};